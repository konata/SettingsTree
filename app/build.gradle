import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.android.settings'
    compileSdk 34

    defaultConfig {
        applicationId "com.android.settings"
        minSdk 34
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            def src = Files.list(Paths.get("${project.rootDir}/externals")).filter { Files.isDirectory(it) }.toArray()
            java.srcDirs = src.toList()
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.slice:slice-builders:1.1.0-alpha02'
    implementation 'androidx.window:embeding'
    implementation 'androidx.slice:slice-core:1.0.0'
    implementation 'androidx.slice:slice-view:1.1.0-alpha02'
}


task link() {
    doLast {
        def directSrc = [
                "base/packages/SettingsLib/src",
                "base/packages/SettingsProvider/src",
                "Settings/src"
        ].collect { symbol ->
            [symbol, new File("${project.rootDir}/../$symbol"), new File("${project.rootDir}/externals/${symbol.replaceAll("/", "@")}")]
        }

        directSrc.forEach {
            println(it)
        }

        def childrenSrc = [
                "base/Packages/SettingsLib"
        ].collectMany { parent ->
            new File("${project.rootDir}/../$parent").listFiles().findAll { it.isDirectory() && new File(it, "src").isDirectory() }.collect { module ->
                def src = new File(module, "src")
                def identifier = src.path.split(parent)[1].substring(1)
                def symbol = "$parent/$identifier"
                [symbol, src, new File("${project.rootDir}/externals/${symbol.replaceAll("/", "@")}")]
            }
        }

        (directSrc + childrenSrc).forEach {
            println("from: ${it[1]} -> ${it[2]}")
            Files.createSymbolicLink(it[2].toPath(), it[1].toPath())
        }

    }
}